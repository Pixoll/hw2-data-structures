#pragma once

#include "map_adt"

#include <array>
#include <cstdlib>
#include <functional>
#include <iostream>
#include <vector>

using namespace std;

/**
 * Linear Probing Hash Map
 */
template <typename K, typename V, uint32 N> class lp_hash_map : virtual public map_adt<K, V> {
  private:
    /**
     * key-value pair node
     */
    class hash_node {
      public:
        K key;
        V value;

        hash_node(K key, V value) : key(key), value(value) {}
    };

    /** Table where all the nodes reside */
    array<hash_node *, N> table;
    /** Current size of the table */
    uint32 current_size = 0;
    /** Hash function to calculate the initial index to insert the value at */
    function<int(K)> hash_fn;

  public:
    /** Constructor that takes the hash function as a parameter */
    lp_hash_map(function<int(K)> hash_fn) : hash_fn(hash_fn) {
        if (hash_fn == nullptr) {
            cerr << "hash_fn cannot be null." << endl;
            exit(1);
        }

        /** We use nullptr to mark a node as empty */
        for (uint32 i = 0; i < N; i++) {
            this->table[i] = nullptr;
        }
    }

    /** Deconstructor, frees allocated memory */
    ~lp_hash_map() {
        this->clear();
    }

    /** Get the value paired with the key */
    V get(K key) {
        int index      = this->hash_fn(key);
        uint32 counter = 0;

        hash_node *node = this->table[index];

        // Stop once we run through the entire table or find a match
        while (counter <= N && node != nullptr && node->key != key) {
            counter++;
            index = (index + 1) % N;
            node  = this->table[index];
        }

        return node != nullptr ? node->value : nullptr;
    }

    /** Insert a key-value pair */
    V put(K key, V value) {
        if (this->current_size == N) {
            cerr << "[Linear Probing] Hash Map is full." << endl;
            exit(1);
        }

        int index = this->hash_fn(key);

        hash_node *node = this->table[index];

        // Stop once we find an empty node or a match
        while (node != nullptr && node->key != key) {
            index = (index + 1) % N;
            node  = this->table[index];
        }

        // Found empty node
        if (node == nullptr) {
            this->table[index] = new hash_node(key, value);
            this->current_size++;
            return nullptr;
        }

        // Match -> override value
        V previous_value = node->value;
        node->value      = value;

        return previous_value;
    }

    /** Remove a key-value pair by it's key */
    V remove(K key) {
        int index      = this->hash_fn(key);
        uint32 counter = 0;

        hash_node *node = this->table[index];

        // Stop once we run through the entire table or find a match
        while (counter <= N && (node != nullptr ? node->key != key : true)) {
            counter++;
            index = (index + 1) % N;
            node  = this->table[index];
        }

        // No match
        if (node == nullptr)
            return nullptr;

        // Match -> delete node
        V value = node->value;

        this->table[index] = nullptr;
        delete node;
        this->current_size--;

        return value;
    }

    /** Get the current size of the map */
    uint32 size() {
        return this->current_size;
    }

    /** Whether the map is empty */
    bool empty() {
        return this->current_size == 0;
    }

    /** Clear the map - frees allocated memory */
    void clear() {
        for (uint32 i = 0; i < N; i++) {
            hash_node *node = this->table[i];
            if (node == nullptr)
                continue;

            this->table[i] = nullptr;
            delete node;
        }

        this->current_size = 0;
    }

    /**
     * Vector with all the stored keys
     * Does not guarantee the same order as they were inserted
     */
    vector<K> keys() {
        vector<K> result;

        for (hash_node *node : this->table)
            if (node != nullptr)
                result.push_back(node->key);

        return result;
    }

    /**
     * Vector with all the stored values
     * Does not guarantee the same order as they were inserted
     */
    vector<V> values() {
        vector<V> result;

        for (hash_node *node : this->table)
            if (node != nullptr)
                result.push_back(node->value);

        return result;
    }

    /** Print all the data contained in the map, alongside extra information */
    void print() {
        cout << "max size: " << N << "\n"
             << "filled: " << (float)this->current_size / N * 100 << "%" << "\n\n";

        for (hash_node *node : this->table) {
            if (node == nullptr)
                cout << "<empty>" << "\n";
            else
                cout << node->key << "\n";
        }

        cout << endl;
    }
};
