#pragma once

#include <cstring>
#include <ctime>
#include <sstream>
#include <string>

typedef unsigned int uint32;
typedef unsigned long long uint64;

using namespace std;

string timestamp_to_string(time_t timestamp) {
    tm *time = gmtime(&timestamp);
    char dest[32];
    strftime(dest, 32, "%FT%TZ", time);
    return string(dest);
}

class User {
  private:
    static const int max_username_len = 16;
    static const int max_universities = 11;

  public:
    uint64 id;
    char username[max_username_len];
    uint32 tweets;
    uint32 friends;
    uint32 followers;
    time_t created_at;
    char universities[max_universities][max_username_len];

    User(uint64 id, const char *username, uint32 tweets, uint32 friends, uint32 followers, time_t created_at)
        : id(id), tweets(tweets), friends(friends), followers(followers), created_at(created_at) {
        strncpy(this->username, username, max_username_len);
        this->username[max_username_len - 1] = 0;

        for (int i = 0; i < max_universities; i++)
            this->universities[i][0] = 0;
    }

    void update_stats(uint32 tweets, uint32 friends, uint32 followers) {
        this->tweets    = tweets;
        this->friends   = friends;
        this->followers = followers;
    }

    void add_university(const char *university) {
        for (int i = 0; i < max_universities; i++) {
            if (strncmp(this->universities[i], university, max_username_len) == 0)
                return;

            if (this->universities[i][0] == 0) {
                strncpy(this->universities[i], university, max_username_len);
                this->universities[i][max_username_len - 1] = 0;
                return;
            }
        }
    }

    string to_string() const {
        ostringstream oss;

        oss << this->id << "\t";
        oss << this->username << "\t";
        oss << this->tweets << "\t";
        oss << this->friends << "\t";
        oss << this->followers << "\t";
        oss << timestamp_to_string(this->created_at) << "\t";
        oss << this->universities[0];

        for (int i = 1; i < max_universities; i++) {
            if (this->universities[i][0] == 0)
                break;

            oss << ", " << this->universities[i];
        }

        return oss.str();
    }
};
